C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: d:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe E:\jim\project\A
                    -2021\CDWorkingroom1\RF392\_projectcode\RF392B005\RF392B005\rf392B005_v01\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND 
                    -ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1,SILABS_STARTUP=1) INTVECTOR(0X0000) INTPROMOTE
                    - INCDIR(E:\jim\project\A2021\CDWorkingroom1\RF392\_projectcode\RF392B005\RF392B005\rf392B005_v01\inc;E:\jim\project\A202
                    -1\CDWorkingroom1\RF392\_projectcode\RF392B005\RF392B005\rf392B005_v01\inc\config;E:\jim\project\A2021\CDWorkingroom1\RF3
                    -92\_projectcode\RF392B005\RF392B005\rf392B005_v01\app_code;D:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0
                    -//Lib/efm8_capsense;D:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//Device/EFM8SB1/efm8_capsense/device_l
                    -ayer;D:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//Device/shared/si8051Base;D:/SiliconLabs/SimplicitySt
                    -udio/v5/developer/sdks/8051/v4.2.0//Device/EFM8SB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) O
                    -BJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          
  18          #include "cslib.h"
  19          // [Library Includes]$
  20          
  21          //==============================================================================
  22          // enter_DefaultMode_from_RESET
  23          //==============================================================================
  24          extern void
  25          enter_DefaultMode_from_RESET (void)
  26          {
  27   1        // $[Config Calls]
  28   1        // Save the SFRPAGE
  29   1        uint8_t SFRPAGE_save = SFRPAGE;
  30   1        PCA_0_enter_DefaultMode_from_RESET ();
  31   1        PCACH_2_enter_DefaultMode_from_RESET ();
  32   1        VREG_0_enter_DefaultMode_from_RESET ();
  33   1        PORTS_0_enter_DefaultMode_from_RESET ();
  34   1        PORTS_1_enter_DefaultMode_from_RESET ();
  35   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  36   1        VDDMON_0_enter_DefaultMode_from_RESET ();
  37   1        RSTSRC_0_enter_DefaultMode_from_RESET ();
  38   1        HFOSC_0_enter_DefaultMode_from_RESET ();
  39   1        RTC_0_enter_DefaultMode_from_RESET ();
  40   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  41   1        TIMER16_2_enter_DefaultMode_from_RESET ();
  42   1        CSLIB_0_enter_DefaultMode_from_RESET ();
  43   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  44   1        // Restore the SFRPAGE
  45   1        SFRPAGE = SFRPAGE_save;
  46   1        // [Config Calls]$
  47   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 2   

  48   1      }
  49          
  50          //================================================================================
  51          // PORTS_1_enter_DefaultMode_from_RESET
  52          //================================================================================
  53          extern void
  54          PORTS_1_enter_DefaultMode_from_RESET (void)
  55          {
  56   1        // $[P1 - Port 1 Pin Latch]
  57   1        // [P1 - Port 1 Pin Latch]$
  58   1      
  59   1        // $[P1MDOUT - Port 1 Output Mode]
  60   1        /***********************************************************************
  61   1         - P1.0 output is open-drain
  62   1         - P1.1 output is open-drain
  63   1         - P1.2 output is push-pull
  64   1         - P1.3 output is push-pull
  65   1         - P1.5 output is push-pull
  66   1         - P1.6 output is push-pull
  67   1         - P1.7 output is push-pull
  68   1         ***********************************************************************/
  69   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
  70   1            | P1MDOUT_B2__PUSH_PULL | P1MDOUT_B3__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
  71   1            | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__PUSH_PULL;
  72   1        // [P1MDOUT - Port 1 Output Mode]$
  73   1      
  74   1        // $[P1MDIN - Port 1 Input Mode]
  75   1        /***********************************************************************
  76   1         - P1.0 pin is configured for analog mode
  77   1         - P1.1 pin is configured for analog mode
  78   1         - P1.2 pin is configured for digital mode
  79   1         - P1.3 pin is configured for digital mode
  80   1         - P1.5 pin is configured for digital mode
  81   1         - P1.6 pin is configured for digital mode
  82   1         - P1.7 pin is configured for digital mode
  83   1         ***********************************************************************/
  84   1        P1MDIN = P1MDIN_B0__ANALOG | P1MDIN_B1__ANALOG | P1MDIN_B2__DIGITAL
  85   1            | P1MDIN_B3__DIGITAL | P1MDIN_B5__DIGITAL | P1MDIN_B6__DIGITAL
  86   1            | P1MDIN_B7__DIGITAL;
  87   1        // [P1MDIN - Port 1 Input Mode]$
  88   1      
  89   1        // $[P1SKIP - Port 1 Skip]
  90   1        /***********************************************************************
  91   1         - P1.0 pin is skipped by the crossbar
  92   1         - P1.1 pin is skipped by the crossbar
  93   1         - P1.2 pin is skipped by the crossbar
  94   1         - P1.3 pin is not skipped by the crossbar
  95   1         - P1.5 pin is not skipped by the crossbar
  96   1         - P1.6 pin is not skipped by the crossbar
  97   1         - P1.7 pin is not skipped by the crossbar
  98   1         ***********************************************************************/
  99   1        P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 100   1            | P1SKIP_B3__NOT_SKIPPED | P1SKIP_B5__NOT_SKIPPED | P1SKIP_B6__NOT_SKIPPED
 101   1            | P1SKIP_B7__NOT_SKIPPED;
 102   1        // [P1SKIP - Port 1 Skip]$
 103   1      
 104   1        // $[Missing Pin Skip]
 105   1        // Skip any pins that are not available on this package
 106   1        P1SKIP |= P1SKIP_B4__SKIPPED;
 107   1        // [Missing Pin Skip]$
 108   1      
 109   1        // $[P1MASK - Port 1 Mask]
 110   1        // [P1MASK - Port 1 Mask]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 3   

 111   1      
 112   1        // $[P1MAT - Port 1 Match]
 113   1        // [P1MAT - Port 1 Match]$
 114   1      
 115   1        // $[P1DRV - Port 1 Drive Strength]
 116   1        // [P1DRV - Port 1 Drive Strength]$
 117   1      
 118   1      }
 119          
 120          extern void
 121          CLOCK_0_enter_DefaultMode_from_RESET (void)
 122          {
 123   1      
 124   1        // $[CLKSEL - Clock Select]
 125   1        /***********************************************************************
 126   1         - SYSCLK is equal to selected clock source divided by 1
 127   1         - Clock derived from the internal precision High-Frequency Oscillator
 128   1         ***********************************************************************/
 129   1        CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC;
 130   1        // Wait for the clock to be ready
 131   1        while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 132   1          ;
 133   1        // [CLKSEL - Clock Select]$
 134   1      
 135   1      }
 136          
 137          extern void
 138          VREG_0_enter_DefaultMode_from_RESET (void)
 139          {
 140   1      
 141   1        // $[REG0CN - Voltage Regulator Control]
 142   1        /***********************************************************************
 143   1         - Enable the precision High Frequency Oscillator bias
 144   1         ***********************************************************************/
 145   1        REG0CN = REG0CN_OSCBIAS__ENABLED;
 146   1        // [REG0CN - Voltage Regulator Control]$
 147   1      
 148   1      }
 149          
 150          extern void
 151          PBCFG_0_enter_DefaultMode_from_RESET (void)
 152          {
 153   1      
 154   1        // $[XBR2 - Port I/O Crossbar 2]
 155   1        /***********************************************************************
 156   1         - Weak Pullups enabled 
 157   1         - Crossbar enabled
 158   1         ***********************************************************************/
 159   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 160   1        // [XBR2 - Port I/O Crossbar 2]$
 161   1      
 162   1        // $[XBR0 - Port I/O Crossbar 0]
 163   1        // [XBR0 - Port I/O Crossbar 0]$
 164   1      
 165   1        // $[XBR1 - Port I/O Crossbar 1]
 166   1        // [XBR1 - Port I/O Crossbar 1]$
 167   1      
 168   1      }
 169          
 170          extern void
 171          HFOSC_0_enter_DefaultMode_from_RESET (void)
 172          {
 173   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 4   

 174   1        // $[HFO#CAL - High Frequency Oscillator Calibration]
 175   1        // [HFO#CAL - High Frequency Oscillator Calibration]$
 176   1      
 177   1        // $[HFO#CN - High Frequency Oscillator Control]
 178   1        /***********************************************************************
 179   1         - High Frequency Oscillator enabled
 180   1         ***********************************************************************/
 181   1        HFO0CN |= HFO0CN_IOSCEN__ENABLED;
 182   1        // [HFO#CN - High Frequency Oscillator Control]$
 183   1      
 184   1        // $[Oscillator Ready]
 185   1        while ((HFO0CN & HFO0CN_IFRDY__BMASK) == HFO0CN_IFRDY__NOT_SET)
 186   1          ;
 187   1        // [Oscillator Ready]$
 188   1      
 189   1      }
 190          
 191          extern void
 192          RTC_0_enter_DefaultMode_from_RESET (void)
 193          {
 194   1      
 195   1        // $[RTC Initialization]
 196   1        // [RTC Initialization]$
 197   1      
 198   1        // $[RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]
 199   1        // [RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]$
 200   1      
 201   1        // $[RTC0XCN - RTC Oscillator Control]
 202   1        /***********************************************************************
 203   1         - Self-Oscillate Mode selected
 204   1         - Disable AGC
 205   1         - Enable the Bias Double feature
 206   1         - LFOSC0 enabled and selected as RTC oscillator source
 207   1         ***********************************************************************/
 208   1        RTC0ADR = RTC0XCN0;
 209   1        RTC0DAT = RTC0XCN0_XMODE__SELF_OSCILLATE | RTC0XCN0_AGCEN__DISABLED
 210   1            | RTC0XCN0_BIASX2__ENABLED | RTC0XCN0_LFOEN__ENABLED;
 211   1        while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 212   1          ;    //Poll Busy Bit
 213   1        // [RTC0XCN - RTC Oscillator Control]$
 214   1      
 215   1        // $[RTC0XCF - RTC Oscillator Configuration]
 216   1        // [RTC0XCF - RTC Oscillator Configuration]$
 217   1      
 218   1        // $[CAPTURE0 - RTC Timer Capture 0]
 219   1        // [CAPTURE0 - RTC Timer Capture 0]$
 220   1      
 221   1        // $[CAPTURE1 - RTC Timer Capture 1]
 222   1        // [CAPTURE1 - RTC Timer Capture 1]$
 223   1      
 224   1        // $[CAPTURE2 - RTC Timer Capture 2]
 225   1        // [CAPTURE2 - RTC Timer Capture 2]$
 226   1      
 227   1        // $[CAPTURE3 - RTC Timer Capture 3]
 228   1        // [CAPTURE3 - RTC Timer Capture 3]$
 229   1      
 230   1        // $[ALARM0 - RTC Alarm Programmed Value 0]
 231   1        /***********************************************************************
 232   1         - RTC Alarm Programmed Value 0 = 0x14
 233   1         ***********************************************************************/
 234   1        RTC0ADR = ALARM0;
 235   1        RTC0DAT = (0x14 << ALARM0_ALARM0__SHIFT);
 236   1        while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 5   

 237   1          ;    //Poll Busy Bit
 238   1        // [ALARM0 - RTC Alarm Programmed Value 0]$
 239   1      
 240   1        // $[ALARM1 - RTC Alarm Programmed Value 1]
 241   1        // [ALARM1 - RTC Alarm Programmed Value 1]$
 242   1      
 243   1        // $[ALARM2 - RTC Alarm Programmed Value 2]
 244   1        // [ALARM2 - RTC Alarm Programmed Value 2]$
 245   1      
 246   1        // $[ALARM3 - RTC Alarm Programmed Value 3]
 247   1        // [ALARM3 - RTC Alarm Programmed Value 3]$
 248   1      
 249   1        // $[RTC0CN - RTC Control]
 250   1        /***********************************************************************
 251   1         - Enable RTC oscillator
 252   1         - RTC timer is stopped
 253   1         - Disable missing RTC detector
 254   1         - Disable RTC alarm
 255   1         - Alarm event flag is not set or disable the auto reset function
 256   1         - Do not start a capture operation
 257   1         - Do not start a set operation
 258   1         ***********************************************************************/
 259   1        RTC0ADR = RTC0CN0;
 260   1        RTC0DAT = RTC0CN0_RTC0EN__ENABLED | RTC0CN0_RTC0TR__STOP
 261   1            | RTC0CN0_MCLKEN__DISABLED | RTC0CN0_RTC0AEN__DISABLED
 262   1            | RTC0CN0_ALRM__NOT_SET | RTC0CN0_RTC0CAP__NOT_SET
 263   1            | RTC0CN0_RTC0SET__NOT_SET;
 264   1        while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 265   1          ;    //Poll Busy Bit
 266   1      
 267   1        // [RTC0CN - RTC Control]$
 268   1      
 269   1        // $[External Oscillator Setup]
 270   1        // [External Oscillator Setup]$
 271   1      
 272   1      }
 273          
 274          extern void
 275          CSLIB_0_enter_DefaultMode_from_RESET (void)
 276          {
 277   1      
 278   1        // $[CSLIB Init]
 279   1      
 280   1        // -----------------------------------------------------------------------------
 281   1        // Configures all peripherals controlled by capsense, including the sensing block
 282   1        // and port pins
 283   1        // -----------------------------------------------------------------------------
 284   1        CSLIB_initHardware ();
 285   1      
 286   1        // -----------------------------------------------------------------------------
 287   1        // Initializes capsense variables and performs some scans to initialize the
 288   1        // baselines
 289   1        // -----------------------------------------------------------------------------
 290   1        CSLIB_initLibrary ();
 291   1      
 292   1        // [CSLIB Init]$
 293   1      
 294   1      }
 295          
 296          extern void
 297          PORTS_0_enter_DefaultMode_from_RESET (void)
 298          {
 299   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 6   

 300   1        // $[P0 - Port 0 Pin Latch]
 301   1        // [P0 - Port 0 Pin Latch]$
 302   1      
 303   1        // $[P0MDOUT - Port 0 Output Mode]
 304   1        /***********************************************************************
 305   1         - P0.0 output is open-drain
 306   1         - P0.1 output is open-drain
 307   1         - P0.2 output is open-drain
 308   1         - P0.3 output is open-drain
 309   1         - P0.4 output is push-pull
 310   1         - P0.5 output is push-pull
 311   1         - P0.6 output is push-pull
 312   1         - P0.7 output is open-drain
 313   1         ***********************************************************************/
 314   1        P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 315   1            | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN | P0MDOUT_B4__PUSH_PULL
 316   1            | P0MDOUT_B5__PUSH_PULL | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__OPEN_DRAIN;
 317   1        // [P0MDOUT - Port 0 Output Mode]$
 318   1      
 319   1        // $[P0MDIN - Port 0 Input Mode]
 320   1        /***********************************************************************
 321   1         - P0.0 pin is configured for analog mode
 322   1         - P0.1 pin is configured for analog mode
 323   1         - P0.2 pin is configured for analog mode
 324   1         - P0.3 pin is configured for analog mode
 325   1         - P0.4 pin is configured for digital mode
 326   1         - P0.5 pin is configured for digital mode
 327   1         - P0.6 pin is configured for digital mode
 328   1         - P0.7 pin is configured for analog mode
 329   1         ***********************************************************************/
 330   1        P0MDIN = P0MDIN_B0__ANALOG | P0MDIN_B1__ANALOG | P0MDIN_B2__ANALOG
 331   1            | P0MDIN_B3__ANALOG | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 332   1            | P0MDIN_B6__DIGITAL | P0MDIN_B7__ANALOG;
 333   1        // [P0MDIN - Port 0 Input Mode]$
 334   1      
 335   1        // $[P0SKIP - Port 0 Skip]
 336   1        /***********************************************************************
 337   1         - P0.0 pin is skipped by the crossbar
 338   1         - P0.1 pin is skipped by the crossbar
 339   1         - P0.2 pin is skipped by the crossbar
 340   1         - P0.3 pin is skipped by the crossbar
 341   1         - P0.4 pin is not skipped by the crossbar
 342   1         - P0.5 pin is not skipped by the crossbar
 343   1         - P0.6 pin is not skipped by the crossbar
 344   1         - P0.7 pin is skipped by the crossbar
 345   1         ***********************************************************************/
 346   1        P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 347   1            | P0SKIP_B3__SKIPPED | P0SKIP_B4__NOT_SKIPPED | P0SKIP_B5__NOT_SKIPPED
 348   1            | P0SKIP_B6__NOT_SKIPPED | P0SKIP_B7__SKIPPED;
 349   1        // [P0SKIP - Port 0 Skip]$
 350   1      
 351   1        // $[P0MASK - Port 0 Mask]
 352   1        // [P0MASK - Port 0 Mask]$
 353   1      
 354   1        // $[P0MAT - Port 0 Match]
 355   1        // [P0MAT - Port 0 Match]$
 356   1      
 357   1        // $[P0DRV - Port 0 Drive Strength]
 358   1        // [P0DRV - Port 0 Drive Strength]$
 359   1      
 360   1      }
 361          
 362          extern void
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 7   

 363          PCA_0_enter_DefaultMode_from_RESET (void)
 364          {
 365   1        // $[PCA0MD - PCA Mode]
 366   1        /***********************************************************************
 367   1         - Disable Watchdog Timer
 368   1         - System clock divided by 12
 369   1         - PCA continues to function normally while the system controller is in
 370   1         Idle Mode
 371   1         - Disable the CF interrupt
 372   1         - Disable Watchdog Timer
 373   1         - Watchdog Timer Enable unlocked
 374   1         ***********************************************************************/
 375   1        SFRPAGE = 0x00;
 376   1        PCA0MD &= ~PCA0MD_WDTE__BMASK;
 377   1        PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL
 378   1            | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_WDTE__DISABLED
 379   1            | PCA0MD_WDLCK__UNLOCKED;
 380   1        // [PCA0MD - PCA Mode]$
 381   1      
 382   1        // $[PCA0H - PCA Counter/Timer High Byte]
 383   1        // [PCA0H - PCA Counter/Timer High Byte]$
 384   1      
 385   1        // $[PCA0L - PCA Counter/Timer Low Byte]
 386   1        // [PCA0L - PCA Counter/Timer Low Byte]$
 387   1      
 388   1        // $[PCA0PWM - PCA PWM Configuration]
 389   1        // [PCA0PWM - PCA PWM Configuration]$
 390   1      
 391   1        // $[PCA0CN0 - PCA Control 0]
 392   1        // [PCA0CN0 - PCA Control 0]$
 393   1      
 394   1      }
 395          
 396          extern void
 397          PCACH_2_enter_DefaultMode_from_RESET (void)
 398          {
 399   1        // $[PCA0 Settings Save]
 400   1        // Select Capture/Compare register)
 401   1        PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 402   1        // [PCA0 Settings Save]$
 403   1      
 404   1        // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
 405   1        /***********************************************************************
 406   1         - Disable negative edge capture
 407   1         - Disable CCF2 interrupts
 408   1         - Enable match function
 409   1         - 8 to 11-bit PWM selected
 410   1         - Disable positive edge capture
 411   1         - Disable comparator function
 412   1         - Disable PWM function
 413   1         - Disable toggle function
 414   1         ***********************************************************************/
 415   1        PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED
 416   1            | PCA0CPM2_MAT__ENABLED | PCA0CPM2_PWM16__8_BIT | PCA0CPM2_CAPP__DISABLED
 417   1            | PCA0CPM2_ECOM__DISABLED | PCA0CPM2_PWM__DISABLED
 418   1            | PCA0CPM2_TOG__DISABLED;
 419   1        // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
 420   1      
 421   1        // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 422   1        // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 423   1      
 424   1        // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 425   1        PCA0CPH2 = 0x00;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 8   

 426   1        // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 427   1      
 428   1        // $[Auto-reload]
 429   1        // [Auto-reload]$
 430   1      
 431   1        // $[PCA0 Settings Restore]
 432   1        // [PCA0 Settings Restore]$
 433   1      
 434   1      }
 435          
 436          extern void
 437          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
 438          {
 439   1        // $[CKCON0 - Clock Control 0]
 440   1        /***********************************************************************
 441   1         - System clock divided by 12
 442   1         - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 443   1         - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 444   1         - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 445   1         - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 446   1         - Timer 3 low byte uses the system clock
 447   1         - Timer 1 uses the clock defined by the prescale field, SCA
 448   1         ***********************************************************************/
 449   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 450   1            | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 451   1            | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__SYSCLK
 452   1            | CKCON0_T1M__PRESCALE;
 453   1        // [CKCON0 - Clock Control 0]$
 454   1      
 455   1        // $[TMOD - Timer 0/1 Mode]
 456   1        // [TMOD - Timer 0/1 Mode]$
 457   1      
 458   1        // $[TCON - Timer 0/1 Control]
 459   1        // [TCON - Timer 0/1 Control]$
 460   1      
 461   1      }
 462          
 463          extern void
 464          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 465          {
 466   1        // $[EIE1 - Extended Interrupt Enable 1]
 467   1        // [EIE1 - Extended Interrupt Enable 1]$
 468   1      
 469   1        // $[EIP1 - Extended Interrupt Priority 1]
 470   1        // [EIP1 - Extended Interrupt Priority 1]$
 471   1      
 472   1        // $[IE - Interrupt Enable]
 473   1        /***********************************************************************
 474   1         - Enable each interrupt according to its individual mask setting
 475   1         - Disable external interrupt 0
 476   1         - Disable external interrupt 1
 477   1         - Disable all SPI0 interrupts
 478   1         - Disable all Timer 0 interrupt
 479   1         - Disable all Timer 1 interrupt
 480   1         - Enable interrupt requests generated by the TF2L or TF2H flags
 481   1         - Disable UART0 interrupt
 482   1         ***********************************************************************/
 483   1        IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 484   1            | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED
 485   1            | IE_ES0__DISABLED;
 486   1        // [IE - Interrupt Enable]$
 487   1      
 488   1        // $[IP - Interrupt Priority]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 9   

 489   1        // [IP - Interrupt Priority]$
 490   1      
 491   1        // $[EIE2 - Extended Interrupt Enable 2]
 492   1        // [EIE2 - Extended Interrupt Enable 2]$
 493   1      
 494   1        // $[EIP2 - Extended Interrupt Priority 2]
 495   1        // [EIP2 - Extended Interrupt Priority 2]$
 496   1      
 497   1      }
 498          
 499          extern void
 500          TIMER01_0_enter_DefaultMode_from_RESET (void)
 501          {
 502   1        // $[Timer Initialization]
 503   1        //Save Timer Configuration
 504   1        uint8_t TCON_save;
 505   1        TCON_save = TCON;
 506   1        //Stop Timers
 507   1        TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 508   1      
 509   1        // [Timer Initialization]$
 510   1      
 511   1        // $[TH0 - Timer 0 High Byte]
 512   1        /***********************************************************************
 513   1         - Timer 0 High Byte = 0x40
 514   1         ***********************************************************************/
 515   1        TH0 = (0x40 << TH0_TH0__SHIFT);
 516   1        // [TH0 - Timer 0 High Byte]$
 517   1      
 518   1        // $[TL0 - Timer 0 Low Byte]
 519   1        /***********************************************************************
 520   1         - Timer 0 Low Byte = 0x9C
 521   1         ***********************************************************************/
 522   1        TL0 = (0x9C << TL0_TL0__SHIFT);
 523   1        // [TL0 - Timer 0 Low Byte]$
 524   1      
 525   1        // $[TH1 - Timer 1 High Byte]
 526   1        /***********************************************************************
 527   1         - Timer 1 High Byte = 0x40
 528   1         ***********************************************************************/
 529   1        TH1 = (0x40 << TH1_TH1__SHIFT);
 530   1        // [TH1 - Timer 1 High Byte]$
 531   1      
 532   1        // $[TL1 - Timer 1 Low Byte]
 533   1        /***********************************************************************
 534   1         - Timer 1 Low Byte = 0x9C
 535   1         ***********************************************************************/
 536   1        TL1 = (0x9C << TL1_TL1__SHIFT);
 537   1        // [TL1 - Timer 1 Low Byte]$
 538   1      
 539   1        // $[Timer Restoration]
 540   1        //Restore Timer Configuration
 541   1        TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 542   1      
 543   1        // [Timer Restoration]$
 544   1      
 545   1      }
 546          
 547          extern void
 548          FLASH_0_enter_DefaultMode_from_RESET (void)
 549          {
 550   1      
 551   1        // $[FLSCL - Flash Scale]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 10  

 552   1        /***********************************************************************
 553   1         - The system clock determines the flash read time
 554   1         ***********************************************************************/
 555   1        FLSCL = FLSCL_BYPASS__SYSCLK;
 556   1        // [FLSCL - Flash Scale]$
 557   1      
 558   1      }
 559          
 560          extern void
 561          TIMER16_2_enter_DefaultMode_from_RESET (void)
 562          {
 563   1        // $[Timer Initialization]
 564   1        // Save Timer Configuration
 565   1        uint8_t TMR2CN0_TR2_save;
 566   1        TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 567   1        // Stop Timer
 568   1        TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 569   1        // [Timer Initialization]$
 570   1      
 571   1        // $[TMR2CN0 - Timer 2 Control]
 572   1        // [TMR2CN0 - Timer 2 Control]$
 573   1      
 574   1        // $[TMR2H - Timer 2 High Byte]
 575   1        /***********************************************************************
 576   1         - Timer 2 High Byte = 0xBC
 577   1         ***********************************************************************/
 578   1        TMR2H = (0xBC << TMR2H_TMR2H__SHIFT);
 579   1        // [TMR2H - Timer 2 High Byte]$
 580   1      
 581   1        // $[TMR2L - Timer 2 Low Byte]
 582   1        /***********************************************************************
 583   1         - Timer 2 Low Byte = 0x6A
 584   1         ***********************************************************************/
 585   1        TMR2L = (0x6A << TMR2L_TMR2L__SHIFT);
 586   1        // [TMR2L - Timer 2 Low Byte]$
 587   1      
 588   1        // $[TMR2RLH - Timer 2 Reload High Byte]
 589   1        /***********************************************************************
 590   1         - Timer 2 Reload High Byte = 0xD8
 591   1         ***********************************************************************/
 592   1        TMR2RLH = (0xD8 << TMR2RLH_TMR2RLH__SHIFT);
 593   1        // [TMR2RLH - Timer 2 Reload High Byte]$
 594   1      
 595   1        // $[TMR2RLL - Timer 2 Reload Low Byte]
 596   1        /***********************************************************************
 597   1         - Timer 2 Reload Low Byte = 0x20
 598   1         ***********************************************************************/
 599   1        TMR2RLL = (0x20 << TMR2RLL_TMR2RLL__SHIFT);
 600   1        // [TMR2RLL - Timer 2 Reload Low Byte]$
 601   1      
 602   1        // $[TMR2CN0]
 603   1        // [TMR2CN0]$
 604   1      
 605   1        // $[Timer Restoration]
 606   1        // Restore Timer Configuration
 607   1        TMR2CN0 |= TMR2CN0_TR2_save;
 608   1        // [Timer Restoration]$
 609   1      
 610   1      }
 611          
 612          extern void
 613          TIMER16_3_enter_DefaultMode_from_RESET (void)
 614          {
C51 COMPILER V9.60.0.0   INITDEVICE                                                        05/12/2021 09:42:50 PAGE 11  

 615   1      
 616   1      }
 617          
 618          extern void
 619          VDDMON_0_enter_DefaultMode_from_RESET (void)
 620          {
 621   1      
 622   1        // $[VDM0CN - VDD Supply Monitor Control]
 623   1        /***********************************************************************
 624   1         - Disable the VDD Early Warning interrupt
 625   1         ***********************************************************************/
 626   1        VDM0CN &= ~VDM0CN_VDDOKIE__BMASK;
 627   1        // [VDM0CN - VDD Supply Monitor Control]$
 628   1      
 629   1      }
 630          
 631          extern void
 632          RSTSRC_0_enter_DefaultMode_from_RESET (void)
 633          {
 634   1      
 635   1        // $[RSTSRC - Reset Source]
 636   1        /***********************************************************************
 637   1         - A power-on or supply monitor reset occurred
 638   1         - A missing clock detector reset did not occur
 639   1         - A Comparator 0 reset did not occur
 640   1         - A RTC alarm or oscillator fail reset did not occur
 641   1         ***********************************************************************/
 642   1        RSTSRC = RSTSRC_PORSF__SET | RSTSRC_MCDRSF__NOT_SET | RSTSRC_C0RSEF__NOT_SET
 643   1            | RSTSRC_RTC0RE__NOT_SET;
 644   1        // [RSTSRC - Reset Source]$
 645   1      
 646   1      }
 647          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    241    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
